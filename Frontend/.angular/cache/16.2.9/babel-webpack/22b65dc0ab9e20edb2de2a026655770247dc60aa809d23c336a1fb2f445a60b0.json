{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../tasks.service\";\nimport * as i4 from \"@angular/common\";\nfunction UpdateTaskComponent_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19)(1, \"div\", 20);\n    i0.ɵɵtext(2, \"Completed\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 12)(4, \"select\", 21)(5, \"option\", 22);\n    i0.ɵɵtext(6, \"No\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"option\", 22);\n    i0.ɵɵtext(8, \"Yes\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngValue\", false);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngValue\", true);\n  }\n}\nconst _c0 = function () {\n  return [\"/list-tasks/\"];\n};\n// ... (existing imports)\nexport class UpdateTaskComponent {\n  constructor(fb, router, tasksService, activatedRoute) {\n    this.fb = fb;\n    this.router = router;\n    this.tasksService = tasksService;\n    this.activatedRoute = activatedRoute;\n    this.angForm = this.fb.group({\n      id: [''],\n      dueDate: [''],\n      content: ['', Validators.required],\n      completed: [false] // Assuming completed is a boolean, change the type accordingly\n    });\n\n    this.subscription = this.activatedRoute.paramMap.subscribe(params => {\n      this.id = params.get('id');\n    });\n  }\n  ngOnInit() {\n    this.getSingleTask(this.id);\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n  getSingleTask(id) {\n    this.tasksService.getTaskById(id).subscribe(res => {\n      this.task = res;\n      this.angForm.patchValue(this.task);\n      console.log(res);\n    }, err => {\n      this.error = err;\n    });\n  }\n  editData() {\n    if (this.angForm.valid) {\n      this.tasksService.updateTask(this.id, this.angForm.value).subscribe(res => {\n        this.success = 'Updated successfully';\n        this.router.navigate(['/list-tasks']);\n      }, err => {\n        this.error = err;\n      });\n    } else {\n      console.error('Form is invalid');\n    }\n  }\n  static #_ = this.ɵfac = function UpdateTaskComponent_Factory(t) {\n    return new (t || UpdateTaskComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.TasksService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UpdateTaskComponent,\n    selectors: [[\"app-update-task\"]],\n    decls: 30,\n    vars: 4,\n    consts: [[\"id\", \"grad\"], [1, \"container\", \"extra_container\"], [1, \"row\"], [1, \"col\"], [1, \"container\", \"text-end\"], [1, \"btn\", \"btn-primary\"], [3, \"routerLink\"], [1, \"container\", \"border\", \"bg-light\"], [\"autocomplete\", \"off\", 3, \"formGroup\", \"ngSubmit\"], [\"type\", \"hidden\", \"name\", \"id\", \"formControlName\", \"id\"], [1, \"row\", \"align-items-center\", \"mt-3\"], [\"id\", \"cnt\", 1, \"col-md-4\", \"text-center\"], [1, \"col-md-6\"], [\"type\", \"text\", \"name\", \"content\", \"formControlName\", \"content\", 1, \"form-control\"], [\"id\", \"dud\", 1, \"col-md-4\", \"text-center\"], [\"type\", \"date\", \"name\", \"dueDate\", \"formControlName\", \"dueDate\", 1, \"form-control\"], [\"class\", \"row align-items-center mt-3\", \"id\", \"comp\", 4, \"ngIf\"], [1, \"col-md-12\", \"text-center\"], [\"type\", \"submit\", \"name\", \"submit\", \"value\", \"Update\", 1, \"btn\", \"btn-warning\"], [\"id\", \"comp\", 1, \"row\", \"align-items-center\", \"mt-3\"], [1, \"col-md-4\", \"text-center\"], [\"name\", \"completed\", \"formControlName\", \"completed\", 1, \"form-control\"], [3, \"ngValue\"]],\n    template: function UpdateTaskComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n        i0.ɵɵelement(3, \"p\");\n        i0.ɵɵelementStart(4, \"div\", 3)(5, \"h2\");\n        i0.ɵɵtext(6, \"Update Task...\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(7, \"div\", 3);\n        i0.ɵɵelementStart(8, \"div\", 3)(9, \"div\", 4)(10, \"button\", 5)(11, \"a\", 6);\n        i0.ɵɵtext(12, \"Back\");\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(13, \"div\", 7)(14, \"form\", 8);\n        i0.ɵɵlistener(\"ngSubmit\", function UpdateTaskComponent_Template_form_ngSubmit_14_listener() {\n          return ctx.editData();\n        });\n        i0.ɵɵelement(15, \"input\", 9);\n        i0.ɵɵelementStart(16, \"div\", 10)(17, \"div\", 11);\n        i0.ɵɵtext(18, \"Content\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"div\", 12);\n        i0.ɵɵelement(20, \"input\", 13);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(21, \"div\", 10)(22, \"div\", 14);\n        i0.ɵɵtext(23, \"Due Date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"div\", 12);\n        i0.ɵɵelement(25, \"input\", 15);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(26, UpdateTaskComponent_div_26_Template, 9, 2, \"div\", 16);\n        i0.ɵɵelementStart(27, \"div\", 10)(28, \"div\", 17);\n        i0.ɵɵelement(29, \"input\", 18);\n        i0.ɵɵelementEnd()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(3, _c0));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.angForm);\n        i0.ɵɵadvance(12);\n        i0.ɵɵproperty(\"ngIf\", false);\n      }\n    },\n    dependencies: [i4.NgIf, i2.RouterLink, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\"a[_ngcontent-%COMP%]:link, a[_ngcontent-%COMP%]:visited {\\n    color: white;\\n    text-align: center;\\n    text-decoration: none;\\n    display: inline-block;\\n  }\\n\\n\\n  #cnt[_ngcontent-%COMP%], #dud[_ngcontent-%COMP%] {\\n    font-weight: bold;\\n   }\\n\\n   #grad[_ngcontent-%COMP%] {\\n    \\n   }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdXBkYXRlLXRhc2svdXBkYXRlLXRhc2suY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIscUJBQXFCO0lBQ3JCLHFCQUFxQjtFQUN2Qjs7O0VBR0E7SUFDRSxpQkFBaUI7R0FDbEI7O0dBRUE7O0dBRUEiLCJzb3VyY2VzQ29udGVudCI6WyJhOmxpbmssIGE6dmlzaXRlZCB7XG4gICAgY29sb3I6IHdoaXRlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB9XG5cblxuICAjY250LCAjZHVkIHtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgIH1cblxuICAgI2dyYWQge1xuICAgIFxuICAgfSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","UpdateTaskComponent","constructor","fb","router","tasksService","activatedRoute","angForm","group","id","dueDate","content","required","completed","subscription","paramMap","subscribe","params","get","ngOnInit","getSingleTask","ngOnDestroy","unsubscribe","getTaskById","res","task","patchValue","console","log","err","error","editData","valid","updateTask","value","success","navigate","_","ɵɵdirectiveInject","i1","FormBuilder","i2","Router","i3","TasksService","ActivatedRoute","_2","selectors","decls","vars","consts","template","UpdateTaskComponent_Template","rf","ctx","ɵɵelement","ɵɵlistener","UpdateTaskComponent_Template_form_ngSubmit_14_listener","ɵɵtemplate","UpdateTaskComponent_div_26_Template","ɵɵpureFunction0","_c0"],"sources":["/Users/aakash/To-Do-List-Web-App-using-Flask-and-Angular/Frontend/src/app/update-task/update-task.component.ts","/Users/aakash/To-Do-List-Web-App-using-Flask-and-Angular/Frontend/src/app/update-task/update-task.component.html"],"sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { TasksService } from '../tasks.service';\nimport { Subscription } from 'rxjs';\n\n// ... (existing imports)\n\n@Component({\n  selector: 'app-update-task',\n  templateUrl: './update-task.component.html',\n  styleUrls: ['./update-task.component.css']\n})\nexport class UpdateTaskComponent implements OnInit, OnDestroy {\n  angForm: FormGroup;\n  error: any;\n  id: any;\n  task: any;\n  success: string | undefined;\n  private subscription: Subscription;\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private tasksService: TasksService,\n    private activatedRoute: ActivatedRoute\n  ) {\n    this.angForm = this.fb.group({\n      id: [''],\n      dueDate: [''],\n      content: ['', Validators.required],\n      completed: [false], // Assuming completed is a boolean, change the type accordingly\n    });\n\n    this.subscription = this.activatedRoute.paramMap.subscribe(params => {\n      this.id = params.get('id');\n    });\n  }\n\n  ngOnInit(): void {\n    this.getSingleTask(this.id);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  getSingleTask(id: any): void {\n    this.tasksService.getTaskById(id)\n      .subscribe(\n        (res: any) => {\n          this.task = res;\n          this.angForm.patchValue(this.task);\n          console.log(res);\n        },\n        (err: any) => {\n          this.error = err;\n        }\n      );\n  }\n\n  editData(): void {\n    if (this.angForm.valid) {\n      this.tasksService.updateTask(this.id, this.angForm.value)\n        .subscribe(\n          (res: any) => {\n            this.success = 'Updated successfully';\n            this.router.navigate(['/list-tasks']);\n          },\n          (err: any) => {\n            this.error = err;\n          }\n        );\n    } else {\n      console.error('Form is invalid');\n    }\n  }\n}\n","<div id=\"grad\">\n<div class=\"container extra_container\">\n    <div class=\"row\">\n      <p></p>\n      <div class=\"col\">\n        <h2>Update Task...</h2>\n      </div>\n      <div class=\"col\"></div>\n      <div class=\"col\">\n        <div class=\"container text-end\">\n          <button class=\"btn btn-primary\">\n            <a [routerLink]=\"['/list-tasks/']\">Back</a>\n          </button>\n        </div>\n      </div>\n    </div>\n  \n    <div class=\"container border bg-light\">\n      <form [formGroup]=\"angForm\" (ngSubmit)=\"editData()\" autocomplete=\"off\">\n        <input type=\"hidden\" name=\"id\" formControlName=\"id\">\n  \n        <div class=\"row align-items-center mt-3\">\n          <div class=\"col-md-4 text-center\" id=\"cnt\">Content</div>\n          <div class=\"col-md-6\"><input type=\"text\" class=\"form-control\" name=\"content\" formControlName=\"content\"></div>\n        </div>\n  \n        <div class=\"row align-items-center mt-3\">\n          <div class=\"col-md-4 text-center\" id=\"dud\">Due Date</div>\n          <div class=\"col-md-6\"><input type=\"date\" class=\"form-control\" name=\"dueDate\" formControlName=\"dueDate\"></div>\n        </div>\n  \n        <div *ngIf=\"false\" class=\"row align-items-center mt-3\" id=\"comp\">\n            <div class=\"col-md-4 text-center\">Completed</div>\n            <div class=\"col-md-6\">\n              <select class=\"form-control\" name=\"completed\" formControlName=\"completed\">\n                <option [ngValue]=\"false\">No</option>\n                <option [ngValue]=\"true\">Yes</option>\n              </select>\n            </div>\n          </div>\n  \n        <div class=\"row align-items-center mt-3\">\n          <div class=\"col-md-12 text-center\"><input type=\"submit\" class=\"btn btn-warning\" name=\"submit\" value=\"Update\"></div>\n        </div>\n      </form>\n    </div>\n</div>\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}