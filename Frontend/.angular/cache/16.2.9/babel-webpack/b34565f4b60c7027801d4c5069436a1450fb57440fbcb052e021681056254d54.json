{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TasksService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.baseUrl = \"http://127.0.0.1:5000/\";\n  }\n  addTask(taskData) {\n    return this.httpClient.post(this.baseUrl + 'tasks', taskData).pipe(map(response => {\n      return response;\n    }));\n  }\n  listTasks() {\n    return this.httpClient.get(this.baseUrl + 'tasks');\n  }\n  deleteTasks(id) {\n    return this.httpClient.delete(this.baseUrl + 'task/' + id);\n  }\n  getTaskById(id) {\n    return this.httpClient.get(this.baseUrl + 'task/' + id);\n  }\n  updateTask(id, tasks) {\n    return this.httpClient.put(this.baseUrl + 'task/' + id, tasks);\n  }\n  markTaskAsComplete(taskId) {\n    const url = `${this.baseUrl}/task/mark_complete/${taskId}`;\n    return this.httpClient.put(url, {});\n  }\n  static #_ = this.ɵfac = function TasksService_Factory(t) {\n    return new (t || TasksService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TasksService,\n    factory: TasksService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","TasksService","constructor","httpClient","baseUrl","addTask","taskData","post","pipe","response","listTasks","get","deleteTasks","id","delete","getTaskById","updateTask","tasks","put","markTaskAsComplete","taskId","url","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/aakash/To-Do-List-Web-App-using-Flask-and-Angular/Frontend/src/app/tasks.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs';\nimport { Tasks } from './tasks.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TasksService {\n\n  baseUrl:string = \"http://127.0.0.1:5000/\"\n\n  constructor(\n    private httpClient:HttpClient\n  ) { }\n\n  public addTask(taskData: any) {\n    return this.httpClient.post<Tasks>(this.baseUrl + 'tasks', taskData)\n      .pipe(map((response: any) => {\n        return response;\n      }));\n  }\n\n  public listTasks(){ \n    return this.httpClient.get<Tasks[]>(this.baseUrl+'tasks')\n  }\n\n  deleteTasks(id: any){\n    return this.httpClient.delete<Tasks[]>(this.baseUrl+'task/'+id)\n  }\n\n  getTaskById(id: any) {\n    return this.httpClient.get<Tasks[]>(this.baseUrl+'task/'+id)\n  }\n\n  updateTask(id: any, tasks: Tasks) {\n    return this.httpClient.put<Tasks[]>(this.baseUrl+'task/'+id, tasks);\n  }\n\n  markTaskAsComplete(taskId: number): Observable<any> {\n    const url = `${this.baseUrl}/task/mark_complete/${taskId}`;\n\n    return this.httpClient.put(url, {});\n  }\n}\n\n"],"mappings":"AAEA,SAASA,GAAG,QAAQ,MAAM;;;AAM1B,OAAM,MAAOC,YAAY;EAIvBC,YACUC,UAAqB;IAArB,KAAAA,UAAU,GAAVA,UAAU;IAHpB,KAAAC,OAAO,GAAU,wBAAwB;EAIrC;EAEGC,OAAOA,CAACC,QAAa;IAC1B,OAAO,IAAI,CAACH,UAAU,CAACI,IAAI,CAAQ,IAAI,CAACH,OAAO,GAAG,OAAO,EAAEE,QAAQ,CAAC,CACjEE,IAAI,CAACR,GAAG,CAAES,QAAa,IAAI;MAC1B,OAAOA,QAAQ;IACjB,CAAC,CAAC,CAAC;EACP;EAEOC,SAASA,CAAA;IACd,OAAO,IAAI,CAACP,UAAU,CAACQ,GAAG,CAAU,IAAI,CAACP,OAAO,GAAC,OAAO,CAAC;EAC3D;EAEAQ,WAAWA,CAACC,EAAO;IACjB,OAAO,IAAI,CAACV,UAAU,CAACW,MAAM,CAAU,IAAI,CAACV,OAAO,GAAC,OAAO,GAACS,EAAE,CAAC;EACjE;EAEAE,WAAWA,CAACF,EAAO;IACjB,OAAO,IAAI,CAACV,UAAU,CAACQ,GAAG,CAAU,IAAI,CAACP,OAAO,GAAC,OAAO,GAACS,EAAE,CAAC;EAC9D;EAEAG,UAAUA,CAACH,EAAO,EAAEI,KAAY;IAC9B,OAAO,IAAI,CAACd,UAAU,CAACe,GAAG,CAAU,IAAI,CAACd,OAAO,GAAC,OAAO,GAACS,EAAE,EAAEI,KAAK,CAAC;EACrE;EAEAE,kBAAkBA,CAACC,MAAc;IAC/B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACjB,OAAO,uBAAuBgB,MAAM,EAAE;IAE1D,OAAO,IAAI,CAACjB,UAAU,CAACe,GAAG,CAACG,GAAG,EAAE,EAAE,CAAC;EACrC;EAAC,QAAAC,CAAA,G;qBAnCUrB,YAAY,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZ1B,YAAY;IAAA2B,OAAA,EAAZ3B,YAAY,CAAA4B,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}